<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.25.16
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Batch\v1;

use DateTimeInterface;
use K8s\Api\Model\Api\Core\v1\ObjectReference;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\ManagedFieldsEntry;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\ObjectMeta;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\OwnerReference;
use K8s\Core\Annotation as Kubernetes;

/**
 * CronJob represents the configuration of a single cron job.
 *
 * @Kubernetes\Kind("CronJob",group="batch",version="v1")
 * @Kubernetes\Operation("get",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}",response="static::class")
 * @Kubernetes\Operation("get-status",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status",response="static::class")
 * @Kubernetes\Operation("post",path="/apis/batch/v1/namespaces/{namespace}/cronjobs",body="model",response="static::class")
 * @Kubernetes\Operation("delete",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Status")
 * @Kubernetes\Operation("watch",path="/apis/batch/v1/namespaces/{namespace}/cronjobs",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent")
 * @Kubernetes\Operation("put",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}",body="model",response="static::class")
 * @Kubernetes\Operation("put-status",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status",body="model",response="static::class")
 * @Kubernetes\Operation("deletecollection",path="/apis/batch/v1/namespaces/{namespace}/cronjobs",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Status")
 * @Kubernetes\Operation("watch-all",path="/apis/batch/v1/cronjobs",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent")
 * @Kubernetes\Operation("patch",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}",body="patch",response="static::class")
 * @Kubernetes\Operation("patch-status",path="/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status",body="patch",response="static::class")
 * @Kubernetes\Operation("list",path="/apis/batch/v1/namespaces/{namespace}/cronjobs",response="K8s\Api\Model\Api\Batch\v1\CronJobList")
 * @Kubernetes\Operation("list-all",path="/apis/batch/v1/cronjobs",response="K8s\Api\Model\Api\Batch\v1\CronJobList")
 */
class CronJob
{
    /**
     * @Kubernetes\Attribute("apiVersion")
     * @var string
     */
    protected $apiVersion = 'batch/v1';

    /**
     * @Kubernetes\Attribute("kind")
     * @var string
     */
    protected $kind = 'CronJob';

    /**
     * @Kubernetes\Attribute("metadata",type="model",model=ObjectMeta::class)
     * @var ObjectMeta
     */
    protected $metadata;

    /**
     * @Kubernetes\Attribute("spec",type="model",model=CronJobSpec::class)
     * @var CronJobSpec
     */
    protected $spec;

    /**
     * @Kubernetes\Attribute("status",type="model",model=CronJobStatus::class)
     * @var CronJobStatus|null
     */
    protected $status = null;

    /**
     * @param JobTemplateSpec $jobTemplate
     * @param string $schedule
     */
    public function __construct(?string $name, JobTemplateSpec $jobTemplate, string $schedule)
    {
        $this->metadata = new ObjectMeta($name);
        $this->spec = new CronJobSpec($jobTemplate, $schedule);
    }

    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external
     * tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when
     * modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    public function getAnnotations(): ?array
    {
        return $this->metadata->getAnnotations();
    }

    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external
     * tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when
     * modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     *
     * @return static
     */
    public function setAnnotations(array $annotations)
    {
        $this->metadata->setAnnotations($annotations);

        return $this;
    }

    /**
     * CreationTimestamp is a timestamp representing the server time when this object was created. It is
     * not guaranteed to be set in happens-before order across separate operations. Clients may not set
     * this value. It is represented in RFC3339 form and is in UTC.
     *
     * Populated by the system. Read-only. Null for lists. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public function getCreationTimestamp(): ?DateTimeInterface
    {
        return $this->metadata->getCreationTimestamp();
    }

    /**
     * Number of seconds allowed for this object to gracefully terminate before it will be removed from the
     * system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     */
    public function getDeletionGracePeriodSeconds(): ?int
    {
        return $this->metadata->getDeletionGracePeriodSeconds();
    }

    /**
     * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is
     * set by the server when a graceful deletion is requested by the user, and is not directly settable by
     * a client. The resource is expected to be deleted (no longer visible from resource lists, and not
     * reachable by name) after the time in this field, once the finalizers list is empty. As long as the
     * finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value
     * may not be unset or be set further into the future, although it may be shortened or the resource may
     * be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds.
     * The Kubelet will react by sending a graceful termination signal to the containers in the pod. After
     * that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and
     * after cleanup, remove the pod from the API. In the presence of network partitions, this object may
     * still exist after this timestamp, until an administrator or automated process can determine the
     * resource is fully terminated. If not set, graceful deletion of the object has not been requested.
     *
     * Populated by the system when a graceful deletion is requested. Read-only. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public function getDeletionTimestamp(): ?DateTimeInterface
    {
        return $this->metadata->getDeletionTimestamp();
    }

    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the
     * responsible component that will remove the entry from the list. If the deletionTimestamp of the
     * object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed
     * in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers.
     * finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is
     * processed in order, then this can lead to a situation in which the component responsible for the
     * first finalizer in the list is waiting for a signal (field value, external system, or other)
     * produced by a component responsible for a finalizer later in the list, resulting in a deadlock.
     * Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to
     * ordering changes in the list.
     */
    public function getFinalizers(): ?array
    {
        return $this->metadata->getFinalizers();
    }

    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the
     * responsible component that will remove the entry from the list. If the deletionTimestamp of the
     * object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed
     * in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers.
     * finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is
     * processed in order, then this can lead to a situation in which the component responsible for the
     * first finalizer in the list is waiting for a signal (field value, external system, or other)
     * produced by a component responsible for a finalizer later in the list, resulting in a deadlock.
     * Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to
     * ordering changes in the list.
     *
     * @return static
     */
    public function setFinalizers(array $finalizers)
    {
        $this->metadata->setFinalizers($finalizers);

        return $this;
    }

    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name
     * field has not been provided. If this field is used, the name returned to the client will be
     * different than the name passed. This value will also be combined with a unique suffix. The provided
     * value has the same validation rules as the Name field, and may be truncated by the length of the
     * suffix required to make the value unique on the server.
     *
     * If this field is specified and the generated name exists, the server will return a 409.
     *
     * Applied only if Name is not specified. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    public function getGenerateName(): ?string
    {
        return $this->metadata->getGenerateName();
    }

    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name
     * field has not been provided. If this field is used, the name returned to the client will be
     * different than the name passed. This value will also be combined with a unique suffix. The provided
     * value has the same validation rules as the Name field, and may be truncated by the length of the
     * suffix required to make the value unique on the server.
     *
     * If this field is specified and the generated name exists, the server will return a 409.
     *
     * Applied only if Name is not specified. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     *
     * @return static
     */
    public function setGenerateName(string $generateName)
    {
        $this->metadata->setGenerateName($generateName);

        return $this;
    }

    /**
     * A sequence number representing a specific generation of the desired state. Populated by the system.
     * Read-only.
     */
    public function getGeneration(): ?int
    {
        return $this->metadata->getGeneration();
    }

    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select)
     * objects. May match selectors of replication controllers and services. More info:
     * http://kubernetes.io/docs/user-guide/labels
     */
    public function getLabels(): ?array
    {
        return $this->metadata->getLabels();
    }

    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select)
     * objects. May match selectors of replication controllers and services. More info:
     * http://kubernetes.io/docs/user-guide/labels
     *
     * @return static
     */
    public function setLabels(array $labels)
    {
        $this->metadata->setLabels($labels);

        return $this;
    }

    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow.
     * This is mostly for internal housekeeping, and users typically shouldn't need to set or understand
     * this field. A workflow can be the user's name, a controller's name, or the name of a specific apply
     * path like "ci-cd". The set of fields is always in the version that the workflow used when modifying
     * the object.
     *
     * @return iterable|ManagedFieldsEntry[]
     */
    public function getManagedFields(): ?iterable
    {
        return $this->metadata->getManagedFields();
    }

    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow.
     * This is mostly for internal housekeeping, and users typically shouldn't need to set or understand
     * this field. A workflow can be the user's name, a controller's name, or the name of a specific apply
     * path like "ci-cd". The set of fields is always in the version that the workflow used when modifying
     * the object.
     *
     * @return static
     */
    public function setManagedFields(iterable $managedFields)
    {
        $this->metadata->setManagedFields($managedFields);

        return $this;
    }

    /**
     * @return static
     */
    public function addManagedFields(ManagedFieldsEntry $managedField)
    {
        $this->metadata->addManagedFields($managedField);

        return $this;
    }

    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources
     * may allow a client to request the generation of an appropriate name automatically. Name is primarily
     * intended for creation idempotence and configuration definition. Cannot be updated. More info:
     * http://kubernetes.io/docs/user-guide/identifiers#names
     */
    public function getName(): ?string
    {
        return $this->metadata->getName();
    }

    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources
     * may allow a client to request the generation of an appropriate name automatically. Name is primarily
     * intended for creation idempotence and configuration definition. Cannot be updated. More info:
     * http://kubernetes.io/docs/user-guide/identifiers#names
     *
     * @return static
     */
    public function setName(string $name)
    {
        $this->metadata->setName($name);

        return $this;
    }

    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent
     * to the "default" namespace, but "default" is the canonical representation. Not all objects are
     * required to be scoped to a namespace - the value of this field for those objects will be empty.
     *
     * Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     */
    public function getNamespace(): ?string
    {
        return $this->metadata->getNamespace();
    }

    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent
     * to the "default" namespace, but "default" is the canonical representation. Not all objects are
     * required to be scoped to a namespace - the value of this field for those objects will be empty.
     *
     * Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     *
     * @return static
     */
    public function setNamespace(string $namespace)
    {
        $this->metadata->setNamespace($namespace);

        return $this;
    }

    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object
     * will be garbage collected. If this object is managed by a controller, then an entry in this list
     * will point to this controller, with the controller field set to true. There cannot be more than one
     * managing controller.
     *
     * @return iterable|OwnerReference[]
     */
    public function getOwnerReferences(): ?iterable
    {
        return $this->metadata->getOwnerReferences();
    }

    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object
     * will be garbage collected. If this object is managed by a controller, then an entry in this list
     * will point to this controller, with the controller field set to true. There cannot be more than one
     * managing controller.
     *
     * @return static
     */
    public function setOwnerReferences(iterable $ownerReferences)
    {
        $this->metadata->setOwnerReferences($ownerReferences);

        return $this;
    }

    /**
     * @return static
     */
    public function addOwnerReferences(OwnerReference $ownerReference)
    {
        $this->metadata->addOwnerReferences($ownerReference);

        return $this;
    }

    /**
     * An opaque value that represents the internal version of this object that can be used by clients to
     * determine when objects have changed. May be used for optimistic concurrency, change detection, and
     * the watch operation on a resource or set of resources. Clients must treat these values as opaque and
     * passed unmodified back to the server. They may only be valid for a particular resource or set of
     * resources.
     *
     * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    public function getResourceVersion(): ?string
    {
        return $this->metadata->getResourceVersion();
    }

    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     */
    public function getSelfLink(): ?string
    {
        return $this->metadata->getSelfLink();
    }

    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     *
     * @return static
     */
    public function setSelfLink(string $selfLink)
    {
        $this->metadata->setSelfLink($selfLink);

        return $this;
    }

    /**
     * UID is the unique in time and space value for this object. It is typically generated by the server
     * on successful creation of a resource and is not allowed to change on PUT operations.
     *
     * Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    public function getUid(): ?string
    {
        return $this->metadata->getUid();
    }

    /**
     * Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows
     * CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run
     * hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
     */
    public function getConcurrencyPolicy(): ?string
    {
        return $this->spec->getConcurrencyPolicy();
    }

    /**
     * Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows
     * CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run
     * hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
     *
     *
     *
     * @return static
     */
    public function setConcurrencyPolicy(string $concurrencyPolicy)
    {
        $this->spec->setConcurrencyPolicy($concurrencyPolicy);

        return $this;
    }

    /**
     * The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
     */
    public function getFailedJobsHistoryLimit(): ?int
    {
        return $this->spec->getFailedJobsHistoryLimit();
    }

    /**
     * The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
     *
     * @return static
     */
    public function setFailedJobsHistoryLimit(int $failedJobsHistoryLimit)
    {
        $this->spec->setFailedJobsHistoryLimit($failedJobsHistoryLimit);

        return $this;
    }

    /**
     * Specifies the job that will be created when executing a CronJob.
     */
    public function getJobTemplate(): JobTemplateSpec
    {
        return $this->spec->getJobTemplate();
    }

    /**
     * Specifies the job that will be created when executing a CronJob.
     *
     * @return static
     */
    public function setJobTemplate(JobTemplateSpec $jobTemplate)
    {
        $this->spec->setJobTemplate($jobTemplate);

        return $this;
    }

    /**
     * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
     */
    public function getSchedule(): string
    {
        return $this->spec->getSchedule();
    }

    /**
     * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
     *
     * @return static
     */
    public function setSchedule(string $schedule)
    {
        $this->spec->setSchedule($schedule);

        return $this;
    }

    /**
     * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.
     * Missed jobs executions will be counted as failed ones.
     */
    public function getStartingDeadlineSeconds(): ?int
    {
        return $this->spec->getStartingDeadlineSeconds();
    }

    /**
     * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.
     * Missed jobs executions will be counted as failed ones.
     *
     * @return static
     */
    public function setStartingDeadlineSeconds(int $startingDeadlineSeconds)
    {
        $this->spec->setStartingDeadlineSeconds($startingDeadlineSeconds);

        return $this;
    }

    /**
     * The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
     */
    public function getSuccessfulJobsHistoryLimit(): ?int
    {
        return $this->spec->getSuccessfulJobsHistoryLimit();
    }

    /**
     * The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
     *
     * @return static
     */
    public function setSuccessfulJobsHistoryLimit(int $successfulJobsHistoryLimit)
    {
        $this->spec->setSuccessfulJobsHistoryLimit($successfulJobsHistoryLimit);

        return $this;
    }

    /**
     * This flag tells the controller to suspend subsequent executions, it does not apply to already
     * started executions.  Defaults to false.
     */
    public function isSuspend(): ?bool
    {
        return $this->spec->isSuspend();
    }

    /**
     * This flag tells the controller to suspend subsequent executions, it does not apply to already
     * started executions.  Defaults to false.
     *
     * @return static
     */
    public function setIsSuspend(bool $suspend)
    {
        $this->spec->setIsSuspend($suspend);

        return $this;
    }

    /**
     * The time zone name for the given schedule, see
     * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to
     * the time zone of the kube-controller-manager process. The set of valid time zone names and the time
     * zone offset is loaded from the system-wide time zone database by the API server during CronJob
     * validation and the controller manager during execution. If no system-wide time zone database can be
     * found a bundled version of the database is used instead. If the time zone name becomes invalid
     * during the lifetime of a CronJob or due to a change in host configuration, the controller will stop
     * creating new new Jobs and will create a system event with the reason UnknownTimeZone. More
     * information can be found in
     * https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones This is beta field
     * and must be enabled via the `CronJobTimeZone` feature gate.
     */
    public function getTimeZone(): ?string
    {
        return $this->spec->getTimeZone();
    }

    /**
     * The time zone name for the given schedule, see
     * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to
     * the time zone of the kube-controller-manager process. The set of valid time zone names and the time
     * zone offset is loaded from the system-wide time zone database by the API server during CronJob
     * validation and the controller manager during execution. If no system-wide time zone database can be
     * found a bundled version of the database is used instead. If the time zone name becomes invalid
     * during the lifetime of a CronJob or due to a change in host configuration, the controller will stop
     * creating new new Jobs and will create a system event with the reason UnknownTimeZone. More
     * information can be found in
     * https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones This is beta field
     * and must be enabled via the `CronJobTimeZone` feature gate.
     *
     * @return static
     */
    public function setTimeZone(string $timeZone)
    {
        $this->spec->setTimeZone($timeZone);

        return $this;
    }

    /**
     * A list of pointers to currently running jobs.
     *
     * @return iterable|ObjectReference[]
     */
    public function getActive(): ?iterable
    {
        return $this->status->getActive();
    }

    /**
     * Information when was the last time the job was successfully scheduled.
     */
    public function getLastScheduleTime(): ?DateTimeInterface
    {
        return $this->status->getLastScheduleTime();
    }

    /**
     * Information when was the last time the job successfully completed.
     */
    public function getLastSuccessfulTime(): ?DateTimeInterface
    {
        return $this->status->getLastSuccessfulTime();
    }

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert
     * recognized schemas to the latest internal value, and may reject unrecognized values. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    public function getApiVersion(): string
    {
        return $this->apiVersion;
    }

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert
     * recognized schemas to the latest internal value, and may reject unrecognized values. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     *
     * @return static
     */
    public function setApiVersion(string $apiVersion)
    {
        $this->apiVersion = $apiVersion;

        return $this;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this
     * from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    public function getKind(): string
    {
        return $this->kind;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this
     * from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     *
     * @return static
     */
    public function setKind(string $kind)
    {
        $this->kind = $kind;

        return $this;
    }

    /**
     * Standard object's metadata. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public function getMetadata(): ObjectMeta
    {
        return $this->metadata;
    }

    /**
     * Standard object's metadata. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     *
     * @return static
     */
    public function setMetadata(ObjectMeta $metadata)
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Specification of the desired behavior of a cron job, including the schedule. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    public function getSpec(): CronJobSpec
    {
        return $this->spec;
    }

    /**
     * Specification of the desired behavior of a cron job, including the schedule. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     *
     * @return static
     */
    public function setSpec(CronJobSpec $spec)
    {
        $this->spec = $spec;

        return $this;
    }

    /**
     * Current status of a cron job. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    public function getStatus(): ?CronJobStatus
    {
        return $this->status;
    }

    /**
     * Current status of a cron job. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     *
     * @return static
     */
    public function setStatus(CronJobStatus $status)
    {
        $this->status = $status;

        return $this;
    }
}

<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.25.16
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Core\v1;

use DateTimeInterface;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\ManagedFieldsEntry;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\ObjectMeta;
use K8s\Api\Model\ApiMachinery\Apis\Meta\v1\OwnerReference;
use K8s\Core\Annotation as Kubernetes;
use K8s\Core\Collection;

/**
 * Pod is a collection of containers that can run on a host. This resource is created by clients and
 * scheduled onto hosts.
 *
 * @Kubernetes\Kind("Pod",version="v1")
 * @Kubernetes\Operation("get",path="/api/v1/namespaces/{namespace}/pods/{name}",response="static::class")
 * @Kubernetes\Operation("get-status",path="/api/v1/namespaces/{namespace}/pods/{name}/status",response="static::class")
 * @Kubernetes\Operation("post",path="/api/v1/namespaces/{namespace}/pods",body="model",response="static::class")
 * @Kubernetes\Operation("delete",path="/api/v1/namespaces/{namespace}/pods/{name}",response="static::class")
 * @Kubernetes\Operation("watch",path="/api/v1/namespaces/{namespace}/pods",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent")
 * @Kubernetes\Operation("put",path="/api/v1/namespaces/{namespace}/pods/{name}",body="model",response="static::class")
 * @Kubernetes\Operation("put-status",path="/api/v1/namespaces/{namespace}/pods/{name}/status",body="model",response="static::class")
 * @Kubernetes\Operation("deletecollection",path="/api/v1/namespaces/{namespace}/pods",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\Status")
 * @Kubernetes\Operation("watch-all",path="/api/v1/pods",response="K8s\Api\Model\ApiMachinery\Apis\Meta\v1\WatchEvent")
 * @Kubernetes\Operation("patch",path="/api/v1/namespaces/{namespace}/pods/{name}",body="patch",response="static::class")
 * @Kubernetes\Operation("patch-status",path="/api/v1/namespaces/{namespace}/pods/{name}/status",body="patch",response="static::class")
 * @Kubernetes\Operation("list",path="/api/v1/namespaces/{namespace}/pods",response="K8s\Api\Model\Api\Core\v1\PodList")
 * @Kubernetes\Operation("list-all",path="/api/v1/pods",response="K8s\Api\Model\Api\Core\v1\PodList")
 * @Kubernetes\Operation("proxy",path="/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
 */
class Pod
{
    /**
     * @Kubernetes\Attribute("apiVersion")
     * @var string
     */
    protected $apiVersion = 'v1';

    /**
     * @Kubernetes\Attribute("kind")
     * @var string
     */
    protected $kind = 'Pod';

    /**
     * @Kubernetes\Attribute("metadata",type="model",model=ObjectMeta::class)
     * @var ObjectMeta
     */
    protected $metadata;

    /**
     * @Kubernetes\Attribute("spec",type="model",model=PodSpec::class)
     * @var PodSpec
     */
    protected $spec;

    /**
     * @Kubernetes\Attribute("status",type="model",model=PodStatus::class)
     * @var PodStatus|null
     */
    protected $status = null;

    /**
     * @param iterable|Container[] $containers
     */
    public function __construct(?string $name, iterable $containers)
    {
        $this->metadata = new ObjectMeta($name);
        $this->spec = new PodSpec($containers);
    }

    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external
     * tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when
     * modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    public function getAnnotations(): ?array
    {
        return $this->metadata->getAnnotations();
    }

    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external
     * tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when
     * modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     *
     * @return static
     */
    public function setAnnotations(array $annotations)
    {
        $this->metadata->setAnnotations($annotations);

        return $this;
    }

    /**
     * CreationTimestamp is a timestamp representing the server time when this object was created. It is
     * not guaranteed to be set in happens-before order across separate operations. Clients may not set
     * this value. It is represented in RFC3339 form and is in UTC.
     *
     * Populated by the system. Read-only. Null for lists. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public function getCreationTimestamp(): ?DateTimeInterface
    {
        return $this->metadata->getCreationTimestamp();
    }

    /**
     * Number of seconds allowed for this object to gracefully terminate before it will be removed from the
     * system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     */
    public function getDeletionGracePeriodSeconds(): ?int
    {
        return $this->metadata->getDeletionGracePeriodSeconds();
    }

    /**
     * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is
     * set by the server when a graceful deletion is requested by the user, and is not directly settable by
     * a client. The resource is expected to be deleted (no longer visible from resource lists, and not
     * reachable by name) after the time in this field, once the finalizers list is empty. As long as the
     * finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value
     * may not be unset or be set further into the future, although it may be shortened or the resource may
     * be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds.
     * The Kubelet will react by sending a graceful termination signal to the containers in the pod. After
     * that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and
     * after cleanup, remove the pod from the API. In the presence of network partitions, this object may
     * still exist after this timestamp, until an administrator or automated process can determine the
     * resource is fully terminated. If not set, graceful deletion of the object has not been requested.
     *
     * Populated by the system when a graceful deletion is requested. Read-only. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public function getDeletionTimestamp(): ?DateTimeInterface
    {
        return $this->metadata->getDeletionTimestamp();
    }

    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the
     * responsible component that will remove the entry from the list. If the deletionTimestamp of the
     * object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed
     * in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers.
     * finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is
     * processed in order, then this can lead to a situation in which the component responsible for the
     * first finalizer in the list is waiting for a signal (field value, external system, or other)
     * produced by a component responsible for a finalizer later in the list, resulting in a deadlock.
     * Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to
     * ordering changes in the list.
     */
    public function getFinalizers(): ?array
    {
        return $this->metadata->getFinalizers();
    }

    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the
     * responsible component that will remove the entry from the list. If the deletionTimestamp of the
     * object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed
     * in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers.
     * finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is
     * processed in order, then this can lead to a situation in which the component responsible for the
     * first finalizer in the list is waiting for a signal (field value, external system, or other)
     * produced by a component responsible for a finalizer later in the list, resulting in a deadlock.
     * Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to
     * ordering changes in the list.
     *
     * @return static
     */
    public function setFinalizers(array $finalizers)
    {
        $this->metadata->setFinalizers($finalizers);

        return $this;
    }

    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name
     * field has not been provided. If this field is used, the name returned to the client will be
     * different than the name passed. This value will also be combined with a unique suffix. The provided
     * value has the same validation rules as the Name field, and may be truncated by the length of the
     * suffix required to make the value unique on the server.
     *
     * If this field is specified and the generated name exists, the server will return a 409.
     *
     * Applied only if Name is not specified. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    public function getGenerateName(): ?string
    {
        return $this->metadata->getGenerateName();
    }

    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name
     * field has not been provided. If this field is used, the name returned to the client will be
     * different than the name passed. This value will also be combined with a unique suffix. The provided
     * value has the same validation rules as the Name field, and may be truncated by the length of the
     * suffix required to make the value unique on the server.
     *
     * If this field is specified and the generated name exists, the server will return a 409.
     *
     * Applied only if Name is not specified. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     *
     * @return static
     */
    public function setGenerateName(string $generateName)
    {
        $this->metadata->setGenerateName($generateName);

        return $this;
    }

    /**
     * A sequence number representing a specific generation of the desired state. Populated by the system.
     * Read-only.
     */
    public function getGeneration(): ?int
    {
        return $this->metadata->getGeneration();
    }

    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select)
     * objects. May match selectors of replication controllers and services. More info:
     * http://kubernetes.io/docs/user-guide/labels
     */
    public function getLabels(): ?array
    {
        return $this->metadata->getLabels();
    }

    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select)
     * objects. May match selectors of replication controllers and services. More info:
     * http://kubernetes.io/docs/user-guide/labels
     *
     * @return static
     */
    public function setLabels(array $labels)
    {
        $this->metadata->setLabels($labels);

        return $this;
    }

    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow.
     * This is mostly for internal housekeeping, and users typically shouldn't need to set or understand
     * this field. A workflow can be the user's name, a controller's name, or the name of a specific apply
     * path like "ci-cd". The set of fields is always in the version that the workflow used when modifying
     * the object.
     *
     * @return iterable|ManagedFieldsEntry[]
     */
    public function getManagedFields(): ?iterable
    {
        return $this->metadata->getManagedFields();
    }

    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow.
     * This is mostly for internal housekeeping, and users typically shouldn't need to set or understand
     * this field. A workflow can be the user's name, a controller's name, or the name of a specific apply
     * path like "ci-cd". The set of fields is always in the version that the workflow used when modifying
     * the object.
     *
     * @return static
     */
    public function setManagedFields(iterable $managedFields)
    {
        $this->metadata->setManagedFields($managedFields);

        return $this;
    }

    /**
     * @return static
     */
    public function addManagedFields(ManagedFieldsEntry $managedField)
    {
        $this->metadata->addManagedFields($managedField);

        return $this;
    }

    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources
     * may allow a client to request the generation of an appropriate name automatically. Name is primarily
     * intended for creation idempotence and configuration definition. Cannot be updated. More info:
     * http://kubernetes.io/docs/user-guide/identifiers#names
     */
    public function getName(): ?string
    {
        return $this->metadata->getName();
    }

    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources
     * may allow a client to request the generation of an appropriate name automatically. Name is primarily
     * intended for creation idempotence and configuration definition. Cannot be updated. More info:
     * http://kubernetes.io/docs/user-guide/identifiers#names
     *
     * @return static
     */
    public function setName(string $name)
    {
        $this->metadata->setName($name);

        return $this;
    }

    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent
     * to the "default" namespace, but "default" is the canonical representation. Not all objects are
     * required to be scoped to a namespace - the value of this field for those objects will be empty.
     *
     * Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     */
    public function getNamespace(): ?string
    {
        return $this->metadata->getNamespace();
    }

    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent
     * to the "default" namespace, but "default" is the canonical representation. Not all objects are
     * required to be scoped to a namespace - the value of this field for those objects will be empty.
     *
     * Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     *
     * @return static
     */
    public function setNamespace(string $namespace)
    {
        $this->metadata->setNamespace($namespace);

        return $this;
    }

    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object
     * will be garbage collected. If this object is managed by a controller, then an entry in this list
     * will point to this controller, with the controller field set to true. There cannot be more than one
     * managing controller.
     *
     * @return iterable|OwnerReference[]
     */
    public function getOwnerReferences(): ?iterable
    {
        return $this->metadata->getOwnerReferences();
    }

    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object
     * will be garbage collected. If this object is managed by a controller, then an entry in this list
     * will point to this controller, with the controller field set to true. There cannot be more than one
     * managing controller.
     *
     * @return static
     */
    public function setOwnerReferences(iterable $ownerReferences)
    {
        $this->metadata->setOwnerReferences($ownerReferences);

        return $this;
    }

    /**
     * @return static
     */
    public function addOwnerReferences(OwnerReference $ownerReference)
    {
        $this->metadata->addOwnerReferences($ownerReference);

        return $this;
    }

    /**
     * An opaque value that represents the internal version of this object that can be used by clients to
     * determine when objects have changed. May be used for optimistic concurrency, change detection, and
     * the watch operation on a resource or set of resources. Clients must treat these values as opaque and
     * passed unmodified back to the server. They may only be valid for a particular resource or set of
     * resources.
     *
     * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    public function getResourceVersion(): ?string
    {
        return $this->metadata->getResourceVersion();
    }

    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     */
    public function getSelfLink(): ?string
    {
        return $this->metadata->getSelfLink();
    }

    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     *
     * @return static
     */
    public function setSelfLink(string $selfLink)
    {
        $this->metadata->setSelfLink($selfLink);

        return $this;
    }

    /**
     * UID is the unique in time and space value for this object. It is typically generated by the server
     * on successful creation of a resource and is not allowed to change on PUT operations.
     *
     * Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    public function getUid(): ?string
    {
        return $this->metadata->getUid();
    }

    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the
     * system will actively try to mark it failed and kill associated containers. Value must be a positive
     * integer.
     */
    public function getActiveDeadlineSeconds(): ?int
    {
        return $this->spec->getActiveDeadlineSeconds();
    }

    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the
     * system will actively try to mark it failed and kill associated containers. Value must be a positive
     * integer.
     *
     * @return static
     */
    public function setActiveDeadlineSeconds(int $activeDeadlineSeconds)
    {
        $this->spec->setActiveDeadlineSeconds($activeDeadlineSeconds);

        return $this;
    }

    /**
     * If specified, the pod's scheduling constraints
     */
    public function getAffinity(): ?Affinity
    {
        return $this->spec->getAffinity();
    }

    /**
     * If specified, the pod's scheduling constraints
     *
     * @return static
     */
    public function setAffinity(Affinity $affinity)
    {
        $this->spec->setAffinity($affinity);

        return $this;
    }

    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically
     * mounted.
     */
    public function isAutomountServiceAccountToken(): ?bool
    {
        return $this->spec->isAutomountServiceAccountToken();
    }

    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically
     * mounted.
     *
     * @return static
     */
    public function setIsAutomountServiceAccountToken(bool $automountServiceAccountToken)
    {
        $this->spec->setIsAutomountServiceAccountToken($automountServiceAccountToken);

        return $this;
    }

    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must
     * be at least one container in a Pod. Cannot be updated.
     *
     * @return iterable|Container[]
     */
    public function getContainers(): iterable
    {
        return $this->spec->getContainers();
    }

    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must
     * be at least one container in a Pod. Cannot be updated.
     *
     * @return static
     */
    public function setContainers(iterable $containers)
    {
        $this->spec->setContainers($containers);

        return $this;
    }

    /**
     * @return static
     */
    public function addContainers(Container $container)
    {
        $this->spec->addContainers($container);

        return $this;
    }

    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS
     * configuration based on DNSPolicy.
     */
    public function getDnsConfig(): ?PodDNSConfig
    {
        return $this->spec->getDnsConfig();
    }

    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS
     * configuration based on DNSPolicy.
     *
     * @return static
     */
    public function setDnsConfig(PodDNSConfig $dnsConfig)
    {
        $this->spec->setDnsConfig($dnsConfig);

        return $this;
    }

    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet',
     * 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the
     * policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify
     * DNS policy explicitly to 'ClusterFirstWithHostNet'.
     */
    public function getDnsPolicy(): ?string
    {
        return $this->spec->getDnsPolicy();
    }

    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet',
     * 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the
     * policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify
     * DNS policy explicitly to 'ClusterFirstWithHostNet'.
     *
     *
     *
     * @return static
     */
    public function setDnsPolicy(string $dnsPolicy)
    {
        $this->spec->setDnsPolicy($dnsPolicy);

        return $this;
    }

    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's
     * environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     */
    public function isEnableServiceLinks(): ?bool
    {
        return $this->spec->isEnableServiceLinks();
    }

    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's
     * environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     *
     * @return static
     */
    public function setIsEnableServiceLinks(bool $enableServiceLinks)
    {
        $this->spec->setIsEnableServiceLinks($enableServiceLinks);

        return $this;
    }

    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to
     * perform user-initiated actions such as debugging. This list cannot be specified when creating a pod,
     * and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an
     * existing pod, use the pod's ephemeralcontainers subresource.
     *
     * @return iterable|EphemeralContainer[]
     */
    public function getEphemeralContainers(): ?iterable
    {
        return $this->spec->getEphemeralContainers();
    }

    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to
     * perform user-initiated actions such as debugging. This list cannot be specified when creating a pod,
     * and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an
     * existing pod, use the pod's ephemeralcontainers subresource.
     *
     * @return static
     */
    public function setEphemeralContainers(iterable $ephemeralContainers)
    {
        $this->spec->setEphemeralContainers($ephemeralContainers);

        return $this;
    }

    /**
     * @return static
     */
    public function addEphemeralContainers(EphemeralContainer $ephemeralContainer)
    {
        $this->spec->addEphemeralContainers($ephemeralContainer);

        return $this;
    }

    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if
     * specified. This is only valid for non-hostNetwork pods.
     *
     * @return iterable|HostAlias[]
     */
    public function getHostAliases(): ?iterable
    {
        return $this->spec->getHostAliases();
    }

    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if
     * specified. This is only valid for non-hostNetwork pods.
     *
     * @return static
     */
    public function setHostAliases(iterable $hostAliases)
    {
        $this->spec->setHostAliases($hostAliases);

        return $this;
    }

    /**
     * @return static
     */
    public function addHostAliases(HostAlias $hostAliase)
    {
        $this->spec->addHostAliases($hostAliase);

        return $this;
    }

    /**
     * Use the host's ipc namespace. Optional: Default to false.
     */
    public function isHostIPC(): ?bool
    {
        return $this->spec->isHostIPC();
    }

    /**
     * Use the host's ipc namespace. Optional: Default to false.
     *
     * @return static
     */
    public function setIsHostIPC(bool $hostIPC)
    {
        $this->spec->setIsHostIPC($hostIPC);

        return $this;
    }

    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the
     * ports that will be used must be specified. Default to false.
     */
    public function isHostNetwork(): ?bool
    {
        return $this->spec->isHostNetwork();
    }

    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the
     * ports that will be used must be specified. Default to false.
     *
     * @return static
     */
    public function setIsHostNetwork(bool $hostNetwork)
    {
        $this->spec->setIsHostNetwork($hostNetwork);

        return $this;
    }

    /**
     * Use the host's pid namespace. Optional: Default to false.
     */
    public function isHostPID(): ?bool
    {
        return $this->spec->isHostPID();
    }

    /**
     * Use the host's pid namespace. Optional: Default to false.
     *
     * @return static
     */
    public function setIsHostPID(bool $hostPID)
    {
        $this->spec->setIsHostPID($hostPID);

        return $this;
    }

    /**
     * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod
     * will be run in the host user namespace, useful for when the pod needs a feature only available to
     * the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a
     * new userns is created for the pod. Setting false is useful for mitigating container breakout
     * vulnerabilities even allowing users to run their containers as root without actually having root
     * privileges on the host. This field is alpha-level and is only honored by servers that enable the
     * UserNamespacesSupport feature.
     */
    public function isHostUsers(): ?bool
    {
        return $this->spec->isHostUsers();
    }

    /**
     * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod
     * will be run in the host user namespace, useful for when the pod needs a feature only available to
     * the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a
     * new userns is created for the pod. Setting false is useful for mitigating container breakout
     * vulnerabilities even allowing users to run their containers as root without actually having root
     * privileges on the host. This field is alpha-level and is only honored by servers that enable the
     * UserNamespacesSupport feature.
     *
     * @return static
     */
    public function setIsHostUsers(bool $hostUsers)
    {
        $this->spec->setIsHostUsers($hostUsers);

        return $this;
    }

    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a
     * system-defined value.
     */
    public function getHostname(): ?string
    {
        return $this->spec->getHostname();
    }

    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a
     * system-defined value.
     *
     * @return static
     */
    public function setHostname(string $hostname)
    {
        $this->spec->setHostname($hostname);

        return $this;
    }

    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for
     * pulling any of the images used by this PodSpec. If specified, these secrets will be passed to
     * individual puller implementations for them to use. More info:
     * https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     *
     * @return iterable|LocalObjectReference[]
     */
    public function getImagePullSecrets(): ?iterable
    {
        return $this->spec->getImagePullSecrets();
    }

    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for
     * pulling any of the images used by this PodSpec. If specified, these secrets will be passed to
     * individual puller implementations for them to use. More info:
     * https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     *
     * @return static
     */
    public function setImagePullSecrets(iterable $imagePullSecrets)
    {
        $this->spec->setImagePullSecrets($imagePullSecrets);

        return $this;
    }

    /**
     * @return static
     */
    public function addImagePullSecrets(LocalObjectReference $imagePullSecret)
    {
        $this->spec->addImagePullSecrets($imagePullSecret);

        return $this;
    }

    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior
     * to containers being started. If any init container fails, the pod is considered to have failed and
     * is handled according to its restartPolicy. The name for an init container or normal container must
     * be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes,
     * Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into
     * account during scheduling by finding the highest request/limit for each resource type, and then
     * using the max of of that value or the sum of the normal containers. Limits are applied to init
     * containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be
     * updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     *
     * @return iterable|Container[]
     */
    public function getInitContainers(): ?iterable
    {
        return $this->spec->getInitContainers();
    }

    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior
     * to containers being started. If any init container fails, the pod is considered to have failed and
     * is handled according to its restartPolicy. The name for an init container or normal container must
     * be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes,
     * Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into
     * account during scheduling by finding the highest request/limit for each resource type, and then
     * using the max of of that value or the sum of the normal containers. Limits are applied to init
     * containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be
     * updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     *
     * @return static
     */
    public function setInitContainers(iterable $initContainers)
    {
        $this->spec->setInitContainers($initContainers);

        return $this;
    }

    /**
     * @return static
     */
    public function addInitContainers(Container $initContainer)
    {
        $this->spec->addInitContainers($initContainer);

        return $this;
    }

    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler
     * simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    public function getNodeName(): ?string
    {
        return $this->spec->getNodeName();
    }

    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler
     * simply schedules this pod onto that node, assuming that it fits resource requirements.
     *
     * @return static
     */
    public function setNodeName(string $nodeName)
    {
        $this->spec->setNodeName($nodeName);

        return $this;
    }

    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must
     * match a node's labels for the pod to be scheduled on that node. More info:
     * https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     */
    public function getNodeSelector(): ?array
    {
        return $this->spec->getNodeSelector();
    }

    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must
     * match a node's labels for the pod to be scheduled on that node. More info:
     * https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     *
     * @return static
     */
    public function setNodeSelector(array $nodeSelector)
    {
        $this->spec->setNodeSelector($nodeSelector);

        return $this;
    }

    /**
     * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this
     * is set.
     *
     * If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
     *
     * If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC -
     * spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile -
     * spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy -
     * spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser -
     * spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups -
     * spec.containers[*].securityContext.seLinuxOptions -
     * spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities
     * - spec.containers[*].securityContext.readOnlyRootFilesystem -
     * spec.containers[*].securityContext.privileged -
     * spec.containers[*].securityContext.allowPrivilegeEscalation -
     * spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser -
     * spec.containers[*].securityContext.runAsGroup
     */
    public function getOs(): ?PodOS
    {
        return $this->spec->getOs();
    }

    /**
     * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this
     * is set.
     *
     * If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
     *
     * If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC -
     * spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile -
     * spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy -
     * spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser -
     * spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups -
     * spec.containers[*].securityContext.seLinuxOptions -
     * spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities
     * - spec.containers[*].securityContext.readOnlyRootFilesystem -
     * spec.containers[*].securityContext.privileged -
     * spec.containers[*].securityContext.allowPrivilegeEscalation -
     * spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser -
     * spec.containers[*].securityContext.runAsGroup
     *
     * @return static
     */
    public function setOs(PodOS $os)
    {
        $this->spec->setOs($os);

        return $this;
    }

    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
     * This field will be autopopulated at admission time by the RuntimeClass admission controller. If the
     * RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The
     * RuntimeClass admission controller will reject Pod create requests which have the overhead already
     * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
     * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More
     * info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
     */
    public function getOverhead(): ?array
    {
        return $this->spec->getOverhead();
    }

    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
     * This field will be autopopulated at admission time by the RuntimeClass admission controller. If the
     * RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The
     * RuntimeClass admission controller will reject Pod create requests which have the overhead already
     * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
     * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More
     * info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
     *
     * @return static
     */
    public function setOverhead(array $overhead)
    {
        $this->spec->setOverhead($overhead);

        return $this;
    }

    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
     * PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     */
    public function getPreemptionPolicy(): ?string
    {
        return $this->spec->getPreemptionPolicy();
    }

    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
     * PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     *
     * @return static
     */
    public function setPreemptionPolicy(string $preemptionPolicy)
    {
        $this->spec->setPreemptionPolicy($preemptionPolicy);

        return $this;
    }

    /**
     * The priority value. Various system components use this field to find the priority of the pod. When
     * Priority Admission Controller is enabled, it prevents users from setting this field. The admission
     * controller populates this field from PriorityClassName. The higher the value, the higher the
     * priority.
     */
    public function getPriority(): ?int
    {
        return $this->spec->getPriority();
    }

    /**
     * The priority value. Various system components use this field to find the priority of the pod. When
     * Priority Admission Controller is enabled, it prevents users from setting this field. The admission
     * controller populates this field from PriorityClassName. The higher the value, the higher the
     * priority.
     *
     * @return static
     */
    public function setPriority(int $priority)
    {
        $this->spec->setPriority($priority);

        return $this;
    }

    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are
     * two special keywords which indicate the highest priorities with the former being the highest
     * priority. Any other name must be defined by creating a PriorityClass object with that name. If not
     * specified, the pod priority will be default or zero if there is no default.
     */
    public function getPriorityClassName(): ?string
    {
        return $this->spec->getPriorityClassName();
    }

    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are
     * two special keywords which indicate the highest priorities with the former being the highest
     * priority. Any other name must be defined by creating a PriorityClass object with that name. If not
     * specified, the pod priority will be default or zero if there is no default.
     *
     * @return static
     */
    public function setPriorityClassName(string $priorityClassName)
    {
        $this->spec->setPriorityClassName($priorityClassName);

        return $this;
    }

    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its
     * containers are ready AND all conditions specified in the readiness gates have status equal to "True"
     * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
     *
     * @return iterable|PodReadinessGate[]
     */
    public function getReadinessGates(): ?iterable
    {
        return $this->spec->getReadinessGates();
    }

    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its
     * containers are ready AND all conditions specified in the readiness gates have status equal to "True"
     * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
     *
     * @return static
     */
    public function setReadinessGates(iterable $readinessGates)
    {
        $this->spec->setReadinessGates($readinessGates);

        return $this;
    }

    /**
     * @return static
     */
    public function addReadinessGates(PodReadinessGate $readinessGate)
    {
        $this->spec->addReadinessGates($readinessGate);

        return $this;
    }

    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to
     * Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     */
    public function getRestartPolicy(): ?string
    {
        return $this->spec->getRestartPolicy();
    }

    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to
     * Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     *
     *
     *
     * @return static
     */
    public function setRestartPolicy(string $restartPolicy)
    {
        $this->spec->setRestartPolicy($restartPolicy);

        return $this;
    }

    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to
     * run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If
     * unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty
     * definition that uses the default runtime handler. More info:
     * https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
     */
    public function getRuntimeClassName(): ?string
    {
        return $this->spec->getRuntimeClassName();
    }

    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to
     * run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If
     * unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty
     * definition that uses the default runtime handler. More info:
     * https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
     *
     * @return static
     */
    public function setRuntimeClassName(string $runtimeClassName)
    {
        $this->spec->setRuntimeClassName($runtimeClassName);

        return $this;
    }

    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be
     * dispatched by default scheduler.
     */
    public function getSchedulerName(): ?string
    {
        return $this->spec->getSchedulerName();
    }

    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be
     * dispatched by default scheduler.
     *
     * @return static
     */
    public function setSchedulerName(string $schedulerName)
    {
        $this->spec->setSchedulerName($schedulerName);

        return $this;
    }

    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional:
     * Defaults to empty.  See type description for default values of each field.
     */
    public function getSecurityContext(): ?PodSecurityContext
    {
        return $this->spec->getSecurityContext();
    }

    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional:
     * Defaults to empty.  See type description for default values of each field.
     *
     * @return static
     */
    public function setSecurityContext(PodSecurityContext $securityContext)
    {
        $this->spec->setSecurityContext($securityContext);

        return $this;
    }

    /**
     * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use
     * serviceAccountName instead.
     */
    public function getServiceAccount(): ?string
    {
        return $this->spec->getServiceAccount();
    }

    /**
     * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use
     * serviceAccountName instead.
     *
     * @return static
     */
    public function setServiceAccount(string $serviceAccount)
    {
        $this->spec->setServiceAccount($serviceAccount);

        return $this;
    }

    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info:
     * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     */
    public function getServiceAccountName(): ?string
    {
        return $this->spec->getServiceAccountName();
    }

    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info:
     * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     *
     * @return static
     */
    public function setServiceAccountName(string $serviceAccountName)
    {
        $this->spec->setServiceAccountName($serviceAccountName);

        return $this;
    }

    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the
     * default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the
     * nodename field of struct utsname). In Windows containers, this means setting the registry value of
     * hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
     * to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     */
    public function isSetHostnameAsFQDN(): ?bool
    {
        return $this->spec->isSetHostnameAsFQDN();
    }

    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the
     * default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the
     * nodename field of struct utsname). In Windows containers, this means setting the registry value of
     * hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
     * to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     *
     * @return static
     */
    public function setIsSetHostnameAsFQDN(bool $setHostnameAsFQDN)
    {
        $this->spec->setIsSetHostnameAsFQDN($setHostnameAsFQDN);

        return $this;
    }

    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers
     * will be able to view and signal processes from other containers in the same pod, and the first
     * process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both
     * be set. Optional: Default to false.
     */
    public function isShareProcessNamespace(): ?bool
    {
        return $this->spec->isShareProcessNamespace();
    }

    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers
     * will be able to view and signal processes from other containers in the same pod, and the first
     * process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both
     * be set. Optional: Default to false.
     *
     * @return static
     */
    public function setIsShareProcessNamespace(bool $shareProcessNamespace)
    {
        $this->spec->setIsShareProcessNamespace($shareProcessNamespace);

        return $this;
    }

    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod
     * namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     */
    public function getSubdomain(): ?string
    {
        return $this->spec->getSubdomain();
    }

    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod
     * namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     *
     * @return static
     */
    public function setSubdomain(string $subdomain)
    {
        $this->spec->setSubdomain($subdomain);

        return $this;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete
     * request. Value must be non-negative integer. The value zero indicates stop immediately via the kill
     * signal (no opportunity to shut down). If this value is nil, the default grace period will be used
     * instead. The grace period is the duration in seconds after the processes running in the pod are sent
     * a termination signal and the time when the processes are forcibly halted with a kill signal. Set
     * this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     */
    public function getTerminationGracePeriodSeconds(): ?int
    {
        return $this->spec->getTerminationGracePeriodSeconds();
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete
     * request. Value must be non-negative integer. The value zero indicates stop immediately via the kill
     * signal (no opportunity to shut down). If this value is nil, the default grace period will be used
     * instead. The grace period is the duration in seconds after the processes running in the pod are sent
     * a termination signal and the time when the processes are forcibly halted with a kill signal. Set
     * this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     *
     * @return static
     */
    public function setTerminationGracePeriodSeconds(int $terminationGracePeriodSeconds)
    {
        $this->spec->setTerminationGracePeriodSeconds($terminationGracePeriodSeconds);

        return $this;
    }

    /**
     * If specified, the pod's tolerations.
     *
     * @return iterable|Toleration[]
     */
    public function getTolerations(): ?iterable
    {
        return $this->spec->getTolerations();
    }

    /**
     * If specified, the pod's tolerations.
     *
     * @return static
     */
    public function setTolerations(iterable $tolerations)
    {
        $this->spec->setTolerations($tolerations);

        return $this;
    }

    /**
     * @return static
     */
    public function addTolerations(Toleration $toleration)
    {
        $this->spec->addTolerations($toleration);

        return $this;
    }

    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains.
     * Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints
     * are ANDed.
     *
     * @return iterable|TopologySpreadConstraint[]
     */
    public function getTopologySpreadConstraints(): ?iterable
    {
        return $this->spec->getTopologySpreadConstraints();
    }

    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains.
     * Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints
     * are ANDed.
     *
     * @return static
     */
    public function setTopologySpreadConstraints(iterable $topologySpreadConstraints)
    {
        $this->spec->setTopologySpreadConstraints($topologySpreadConstraints);

        return $this;
    }

    /**
     * @return static
     */
    public function addTopologySpreadConstraints(TopologySpreadConstraint $topologySpreadConstraint)
    {
        $this->spec->addTopologySpreadConstraints($topologySpreadConstraint);

        return $this;
    }

    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info:
     * https://kubernetes.io/docs/concepts/storage/volumes
     *
     * @return iterable|Volume[]
     */
    public function getVolumes(): ?iterable
    {
        return $this->spec->getVolumes();
    }

    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info:
     * https://kubernetes.io/docs/concepts/storage/volumes
     *
     * @return static
     */
    public function setVolumes(iterable $volumes)
    {
        $this->spec->setVolumes($volumes);

        return $this;
    }

    /**
     * @return static
     */
    public function addVolumes(Volume $volume)
    {
        $this->spec->addVolumes($volume);

        return $this;
    }

    /**
     * Current service state of pod. More info:
     * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     *
     * @return iterable|PodCondition[]
     */
    public function getConditions(): ?iterable
    {
        return $this->status->getConditions();
    }

    /**
     * The list has one entry per container in the manifest. More info:
     * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     *
     * @return iterable|ContainerStatus[]
     */
    public function getContainerStatuses(): ?iterable
    {
        return $this->status->getContainerStatuses();
    }

    /**
     * Status for any ephemeral containers that have run in this pod.
     *
     * @return iterable|ContainerStatus[]
     */
    public function getEphemeralContainerStatuses(): ?iterable
    {
        return $this->status->getEphemeralContainerStatuses();
    }

    /**
     * IP address of the host to which the pod is assigned. Empty if not yet scheduled.
     */
    public function getHostIP(): ?string
    {
        return $this->status->getHostIP();
    }

    /**
     * The list has one entry per init container in the manifest. The most recent successful init container
     * will have ready = true, the most recently started container will have startTime set. More info:
     * https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     *
     * @return iterable|ContainerStatus[]
     */
    public function getInitContainerStatuses(): ?iterable
    {
        return $this->status->getInitContainerStatuses();
    }

    /**
     * A human readable message indicating details about why the pod is in this condition.
     */
    public function getMessage(): ?string
    {
        return $this->status->getMessage();
    }

    /**
     * nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
     * scheduled right away as preemption victims receive their graceful termination periods. This field
     * does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the
     * pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the
     * resources on this node to a higher priority pod that is created after preemption. As a result, this
     * field may be different than PodSpec.nodeName when the pod is scheduled.
     */
    public function getNominatedNodeName(): ?string
    {
        return $this->status->getNominatedNodeName();
    }

    /**
     * The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The
     * conditions array, the reason and message fields, and the individual container status arrays contain
     * more detail about the pod's status. There are five possible phase values:
     *
     * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images
     * has not been created. This includes time before being scheduled as well as time spent downloading
     * images over the network, which could take a while. Running: The pod has been bound to a node, and
     * all of the containers have been created. At least one container is still running, or is in the
     * process of starting or restarting. Succeeded: All containers in the pod have terminated in success,
     * and will not be restarted. Failed: All containers in the pod have terminated, and at least one
     * container has terminated in failure. The container either exited with non-zero status or was
     * terminated by the system. Unknown: For some reason the state of the pod could not be obtained,
     * typically due to an error in communicating with the host of the pod.
     *
     * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     */
    public function getPhase(): ?string
    {
        return $this->status->getPhase();
    }

    /**
     * IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     */
    public function getPodIP(): ?string
    {
        return $this->status->getPodIP();
    }

    /**
     * podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must
     * match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is
     * empty if no IPs have been allocated yet.
     *
     * @return iterable|PodIP[]
     */
    public function getPodIPs(): ?iterable
    {
        return $this->status->getPodIPs();
    }

    /**
     * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See
     * PodQOSClass type for available QOS classes More info:
     * https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
     */
    public function getQosClass(): ?string
    {
        return $this->status->getQosClass();
    }

    /**
     * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
     */
    public function getReason(): ?string
    {
        return $this->status->getReason();
    }

    /**
     * RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the
     * Kubelet pulled the container image(s) for the pod.
     */
    public function getStartTime(): ?DateTimeInterface
    {
        return $this->status->getStartTime();
    }

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert
     * recognized schemas to the latest internal value, and may reject unrecognized values. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    public function getApiVersion(): string
    {
        return $this->apiVersion;
    }

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert
     * recognized schemas to the latest internal value, and may reject unrecognized values. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     *
     * @return static
     */
    public function setApiVersion(string $apiVersion)
    {
        $this->apiVersion = $apiVersion;

        return $this;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this
     * from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    public function getKind(): string
    {
        return $this->kind;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this
     * from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     *
     * @return static
     */
    public function setKind(string $kind)
    {
        $this->kind = $kind;

        return $this;
    }

    /**
     * Standard object's metadata. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public function getMetadata(): ObjectMeta
    {
        return $this->metadata;
    }

    /**
     * Standard object's metadata. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     *
     * @return static
     */
    public function setMetadata(ObjectMeta $metadata)
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Specification of the desired behavior of the pod. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    public function getSpec(): PodSpec
    {
        return $this->spec;
    }

    /**
     * Specification of the desired behavior of the pod. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     *
     * @return static
     */
    public function setSpec(PodSpec $spec)
    {
        $this->spec = $spec;

        return $this;
    }

    /**
     * Most recently observed status of the pod. This data may not be up to date. Populated by the system.
     * Read-only. More info:
     * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     */
    public function getStatus(): ?PodStatus
    {
        return $this->status;
    }
}

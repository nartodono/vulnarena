<?php

/**
 * This file was automatically generated by k8s/api-generator 0.12.0 for API version v1.25.16
 *
 * (c) Chad Sikorra <Chad.Sikorra@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace K8s\Api\Model\Api\Apps\v1;

use K8s\Core\Annotation as Kubernetes;

/**
 * Spec to control the desired behavior of daemon set rolling update.
 */
class RollingUpdateDaemonSet
{
    /**
     * @Kubernetes\Attribute("maxSurge")
     * @var int|string|null
     */
    protected $maxSurge = null;

    /**
     * @Kubernetes\Attribute("maxUnavailable")
     * @var int|string|null
     */
    protected $maxUnavailable = null;

    /**
     * @param int|string|null $maxSurge
     * @param int|string|null $maxUnavailable
     */
    public function __construct($maxSurge = null, $maxUnavailable = null)
    {
        $this->maxSurge = $maxSurge;
        $this->maxUnavailable = $maxUnavailable;
    }

    /**
     * The maximum number of nodes with an existing available DaemonSet pod that can have an updated
     * DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of
     * desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from
     * percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%,
     * at most 30% of the total number of nodes that should be running the daemon pod (i.e.
     * status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as
     * deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available
     * (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the
     * old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained)
     * an updated pod is immediatedly created on that node without considering surge limits. Allowing surge
     * implies the possibility that the resources consumed by the daemonset on any given node can double if
     * the readiness check fails, and so resource intensive daemonsets should take into account that they
     * may cause evictions during disruption.
     *
     * @return int|string
     */
    public function getMaxSurge()
    {
        return $this->maxSurge;
    }

    /**
     * The maximum number of nodes with an existing available DaemonSet pod that can have an updated
     * DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of
     * desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from
     * percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%,
     * at most 30% of the total number of nodes that should be running the daemon pod (i.e.
     * status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as
     * deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available
     * (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the
     * old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained)
     * an updated pod is immediatedly created on that node without considering surge limits. Allowing surge
     * implies the possibility that the resources consumed by the daemonset on any given node can double if
     * the readiness check fails, and so resource intensive daemonsets should take into account that they
     * may cause evictions during disruption.
     *
     * @param int|string $maxSurge
     * @return static
     */
    public function setMaxSurge($maxSurge)
    {
        $this->maxSurge = $maxSurge;

        return $this;
    }

    /**
     * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an
     * absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update
     * (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if
     * MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number
     * of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their
     * pods stopped for an update at any given time. The update starts by stopping at most 30% of those
     * DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are
     * available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original
     * number of DaemonSet pods are available at all times during the update.
     *
     * @return int|string
     */
    public function getMaxUnavailable()
    {
        return $this->maxUnavailable;
    }

    /**
     * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an
     * absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update
     * (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if
     * MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number
     * of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their
     * pods stopped for an update at any given time. The update starts by stopping at most 30% of those
     * DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are
     * available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original
     * number of DaemonSet pods are available at all times during the update.
     *
     * @param int|string $maxUnavailable
     * @return static
     */
    public function setMaxUnavailable($maxUnavailable)
    {
        $this->maxUnavailable = $maxUnavailable;

        return $this;
    }
}
